----------------------------------------
                PROGRAM 1
----------------------------------------
int2float --Write a program that converts a 16-bit two’s complement (8 bits integer + 8 bits fractional into 16-bit IEEE floating
point format, i.e.,
short X; // but fractional, not integer!
float Y = X; // actually, equivalent C code would need a special float_binary_16 format command
The operand, X, is found in memory locations 1 (most significant word of X) and 0 (least significant word of X). The result, Y,
shall be written into locations 3 (MSW of Y) and 2 (LSW of Y)

Program steps: 
// Load input from memory (2's complement fixed-point 8.8)
X_high = MEM[1]
X_low  = MEM[0]
X = (X_high << 8) | X_low  // 16-bit fixed-point number

// Step 1: Sign
if (X < 0) {
    SIGN = 1
    X = -X      // Take absolute value (2's complement)
} else {
    SIGN = 0
}

// Step 2: Normalize (find position of first '1' from left)
// For fixed-point 8.8, normalize to [1.xxxxx] form
shift = 0
while (X & 0x8000) == 0 {  // Find leading 1
    X = X << 1
    shift += 1
}

// Step 3: Build exponent and mantissa
// Bias for 5-bit exponent is 15
exponent = 15 + (8 - shift)  // Account for fixed-point binary point at 8
mantissa = (X >> 6) & 0x03FF // Top 10 bits after shifting out implicit 1

// Assemble 16-bit float format: [sign | exponent (5 bits) | mantissa (10 bits)]
Y = (SIGN << 15) | (exponent << 10) | mantissa

// Step 4: Store result into memory
MEM[3] = (Y >> 8) & 0xFF  // MSB
MEM[2] = Y & 0xFF         // LSB


-----------------------------------------
                PROGRAM 2
-----------------------------------------
loat2int -- Write a program that converts a 16-bit IEEE format floating point number to 16-bit two’s complement fixed point 8
integer + 8 fractional, again i.e.:
float X;
short Y = X;
The operand, X, is found in memory locations 5 (MSW) and 4 (LSW). The result shall be written into locations 7 (MSW) and 6
(LSW).

Program steps:
// Load float X from memory
X = (MEM[5] << 8) | MEM[4]

// Step 1: Extract float components
SIGN     = (X >> 15) & 0x1
EXP      = (X >> 10) & 0x1F      // 5-bit exponent
MANTISSA = X & 0x3FF             // 10-bit mantissa

// Step 2: Reconstruct real value (as fixed-point Q8.8)

// If EXP == 0, it's a denormalized number (not supported here)
if (EXP == 0) {
    VALUE = 0
} else {
    BIAS = 15
    E = EXP - BIAS
    
    // Add implicit leading 1 to mantissa: 1.M
    M = (1 << 10) | MANTISSA     // 11-bit value (binary 1.MANTISSA)
    
    // Shift M based on exponent difference:
    if (E >= 0) {
        VALUE = M << E           // Scale up (shift left)
    } else {
        VALUE = M >> -E          // Scale down (shift right)
    }
    
    // Now VALUE is in a fixed-point format, but with 10 mantissa bits
    // So shift right 2 bits to convert to Q8.8 (from 10 fractional bits to 8)
    VALUE = VALUE >> 2
}

// Step 3: Apply sign
if (SIGN == 1) {
    VALUE = -VALUE     // 2's complement negation
}

// Step 4: Store as 16-bit signed Q8.8 in memory
MEM[6] = VALUE & 0xFF          // LSB
MEM[7] = (VALUE >> 8) & 0xFF   // MSB


-------------------------------------------
                PROGRAM 3
-------------------------------------------
float_add -- Write a program that adds two 16-bit floating point numbers.
float X;
float Y;
float Z = X+Y;
One 16-bit floating point operand will occupy data memory locations 9 (MSW) and 8 (LSW), whereas the other will occupy
locations 11 and 10. Write the 16-bit floating point sum into locations 13 and 12 (LSW).

Program steps:
// Step 1: Load X and Y from memory
X = (MEM[9] << 8) | MEM[8]
Y = (MEM[11] << 8) | MEM[10]

// Step 2: Extract sign, exponent, and mantissa
Sx = (X >> 15) & 0x1
Ex = (X >> 10) & 0x1F
Mx = X & 0x3FF
if Ex != 0:
    Mx = Mx | 0x400  // Add implicit leading 1

Sy = (Y >> 15) & 0x1
Ey = (Y >> 10) & 0x1F
My = Y & 0x3FF
if Ey != 0:
    My = My | 0x400  // Add implicit leading 1

// Step 3: Align exponents
if Ex > Ey:
    shift = Ex - Ey
    My = My >> shift
    Ez = Ex
else:
    shift = Ey - Ex
    Mx = Mx >> shift
    Ez = Ey

// Step 4: Add or subtract mantissas depending on signs
if Sx == Sy:
    Mz = Mx + My
    Sz = Sx
else:
    if Mx >= My:
        Mz = Mx - My
        Sz = Sx
    else:
        Mz = My - Mx
        Sz = Sy

// Step 5: Normalize the result
while Mz >= 0x800:   // more than 11 bits
    Mz = Mz >> 1
    Ez = Ez + 1

while Mz < 0x400 and Ez > 0:  // less than 10 bits
    Mz = Mz << 1
    Ez = Ez - 1

// Remove implied 1 for storage if normalized
if Ez != 0:
    Mz = Mz & 0x3FF
else:
    // denormalized: no implicit 1
    Mz = Mz

// Step 6: Assemble result
Z = (Sz << 15) | (Ez << 10) | Mz

// Step 7: Store result in memory
MEM[13] = (Z >> 8) & 0xFF  // MSB
MEM[12] = Z & 0xFF         // LSB

